library (recommenderlab)
## PROYECTO DE RECOMENDACIÓN DE PELICULAS ##
##4/5/2022##
##CREACIÓN Y BASE DEL PROYECTO##
## RODRÍGUEZ JORGE LEONARDO##
##LA IDEA DEL PROYECTO ES GENERAR UN SCRIPT QUE PERMITA LA RECOMENDACIÓN DE PELICULAS
## EN BASE A LA SELECCIÓN DE UNA PELICULA DE UNA BASE DE DATOS##
install.packages("recomenderlab")
library (recommenderlab)
## PROYECTO DE RECOMENDACIÓN DE PELICULAS ##
##4/5/2022##
##CREACIÓN Y BASE DEL PROYECTO##
## RODRÍGUEZ JORGE LEONARDO##
##LA IDEA DEL PROYECTO ES GENERAR UN SCRIPT QUE PERMITA LA RECOMENDACIÓN DE PELICULAS
## EN BASE A LA SELECCIÓN DE UNA PELICULA DE UNA BASE DE DATOS##
install.packages("recomenderlab")
## PROYECTO DE RECOMENDACIÓN DE PELICULAS ##
##4/5/2022##
##CREACIÓN Y BASE DEL PROYECTO##
## RODRÍGUEZ JORGE LEONARDO##
##LA IDEA DEL PROYECTO ES GENERAR UN SCRIPT QUE PERMITA LA RECOMENDACIÓN DE PELICULAS
## EN BASE A LA SELECCIÓN DE UNA PELICULA DE UNA BASE DE DATOS##
install.packages("recomenderlab")
## PROYECTO DE RECOMENDACIÓN DE PELICULAS ##
##4/5/2022##
##CREACIÓN Y BASE DEL PROYECTO##
## RODRÍGUEZ JORGE LEONARDO##
##LA IDEA DEL PROYECTO ES GENERAR UN SCRIPT QUE PERMITA LA RECOMENDACIÓN DE PELICULAS
## EN BASE A LA SELECCIÓN DE UNA PELICULA DE UNA BASE DE DATOS##
install.packages('recommenderlab')
library(recommenderlab)
library (reshape)
install.packages("reshape")
ratingMatrix <- dcast(rating_data, userId~movieId, value.var = "rating",na.rm=F)
library(recommenderlab)
library (recommenderlab)
library (ggplot2)
install.packages("tydiverse")
install.packages("tidyverse")
library(recommenderlab)
library (recommenderlab)
library (ggplot2)
library (data.table)
library (reshape)
getwd()
#Data FLair
movie_data <- read.csv("movies.csv", stringsAsFactors = F)
rating_data <- read.csv("ratings.csv")
str(movie_data)
#Exploramos los datos, la cantidad de registros, el tipo de dato, los primeros y
#los últimos registros.
summary(movie_data)
head(movie_data)
tail(movie_data)
#Exploramos los datos del DF rating de la misma manera
summary (rating_data)
head(rating_data)
tail(rating_data)
movie_genre <- as.data.frame(movie_data$genres, stringsAsFactors = F)
movie_genre2 <- as.data.frame(tstrsplit(movie_genre[,1], "[|]",
type.convert = T),
stringAsFactors = F)
colnames(movie_genre2) <- c(1:10)
list_genre <- c("Action","Adventure","Animation","Children","Comedy","Crime",
"Documentary","Drama","Fantasy","Film-Noir","Horror","Musical",
"Mistery","Romance","Sci-Fi","Thriller","War","Western")
genre_mat1 <- matrix(0,10330,18)
genre_mat1[1,] <- list_genre
colnames(genre_mat1) <- list_genre
for (index in 1:nrow(movie_genre2)) {
for(col in 1:ncol(movie_genre2))  {
gen_col = which (genre_mat1[1,] == movie_genre2[index,col])
genre_mat1[index+1, gen_col] <- 1
}
}
genre_mat2 <- as.data.frame(genre_mat1[-1,], stringsAsFactors = F)
for (col in 1:ncol (genre_mat2)){
}
SearchMatrix <- cbind(movie_data[,1:2], genre_mat2[])
head(SearchMatrix)
ratingMatrix <- dcast(rating_data, userId~movieId, value.var = "rating",na.rm=F)
ratingMatrix <- dcast(rating_data, userId~movieId, value.var = "rating", na.rm=FALSE)
ratingMatrix <- as.matrix(ratingMatrix[,-1]) #remove userIds
ratingMatrix <- dcast(rating_data, userId~movieId, value.var = "rating",
setDT(rating_data),na.rm=FALSE)
ratingMatrix <- dcast.as.data.table(rating_data, userId~movieId, value.var = "rating",na.rm=FALSE)
library (reshape2)
install.packages("reshape2")
library (reshape2)
ratingMatrix <- reshape2::dcast(rating_data, userId~movieId, value.var = "rating",na.rm=FALSE)
ratingMatrix <- as.matrix(ratingMatrix[,-1]) #remove userIds
#Convert rating matrix into a recommenderlab sparse matrix
ratingMatrix <- as(ratingMatrix, "realRatingMatrix")
ratingMatrix
ratingMatrix
source("~/Prediccion_peliculas/Predicción_peliculas_script.R", echo=TRUE)
source("~/Prediccion_peliculas/Predicción_peliculas_script.R", echo=TRUE)
source("~/Prediccion_peliculas/Predicción_peliculas_script.R", echo=TRUE)
modelo_recomendacion <- recommenderRegistry$get_entries(dataType = "realRatingMatrix")
names <- modelo_recomendacion
names(modelo_recomendacion)
lapply(modelo_recomendacion, "[[", "description")
modelo_recomendacion$IBCF_realRatingMatrix$parameters
similarity_mat <- similarity(ratingMatrix[1:4, ],
method = "cosine",
which = "users")
as.matrix(similarity_mat)
image(as.matrix(similarity_mat), main = "User´s similarity")
similutd <- similarity(ratingMatrix[1:4, ],
method = "cosine",
which = "users")
as.matrix(similitud)
similitud <- similarity(ratingMatrix[1:4, ],
method = "cosine",
which = "users")
as.matrix(similitud)
image(as.matrix(similitud), main = "User´s similarity")
image(as.matrix(similitud), main = "Similitud del usuario")
similitud_peliculas <- similarity(ratingMatrix[,1:4],
methor = "cosine",
which = "items")
similitud_peliculas <- similarity(ratingMatrix[,1:4],
methor = "cosine",
which = "items")
similitud_peliculas <- similarity(ratingMatrix[ ,1:4],
methor = "cosine",
which = "items")
similitud_peliculas <- similarity(ratingMatrix[ ,1:4],
method = "cosine",
which = "items")
as.matrix(similitud_peliculas)
image(as.matrix(similitud_peliculas), main = "Similitud entre películas")
#Ahora sacamos los valores unicos de raitings
valor_rating <- as.vector(ratingMatrix@data)
unique(valor_rating)
tabla_de_ratings <- table(valor_rating)
tabla_de_ratings
vistas_peliculas <- colCounts(ratingMatrix) #cuenta las vistas para cada pelicula
tabla_vistas <- data.frame(pelicula = names(vistas_peliculas),
vistas = vistas_peliculas)#crea un df de vistas
tabla_vistas <- tabla_vistas[order(tabla_vistas$vistas,
decreasing = T).]
tabla_vistas <- tabla_vistas[order(tabla_vistas$vistas,
decreasing = T),]
tabla_vistas$title <- NA
tabla_vistas[1:6,]
for (index in 1:10325){
tabla_vistas[index,3] <- as.character(subset(movie_data, movie_data$movieId
== tabla_vistas[index,1])$title)
}
tabla_vistas[1:6,]
#Ahora tenemos una tabla con el id de pelicula, la cantidad de vistas y el título
#lo visualizamos en ggplot
ggplot(tabla_vistas[1:6, ], aes(x = title, y = vistas)) +
geom_bar(stat="identity", fill = "steelblue")+
geom_text(aes(label = vistas), vjust = -0.3, size = 3.5) +
theme(axis.text.x = element_text (angle = 45, hjust = 1)) +
ggtitle("Total de vistas para el Top de Peliculas")
#Ahora tenemos una tabla con el id de pelicula, la cantidad de vistas y el título
#lo visualizamos en ggplot
ggplot(tabla_vistas[1:6, ], aes(x = titulo, y = vistas)) +
geom_bar(stat="identity", fill = "steelblue")+
geom_text(aes(label = vistas), vjust = -0.3, size = 3.5) +
theme(axis.text.x = element_text (angle = 45, hjust = 1)) +
ggtitle("Total de vistas para el Top de Peliculas")
#Ahora tenemos una tabla con el id de pelicula, la cantidad de vistas y el título
#lo visualizamos en ggplot
ggplot(tabla_vistas[1:6, ], aes(x = title, y = vistas)) +
geom_bar(stat="identity", fill = "steelblue")+
geom_text(aes(label = vistas), vjust = -0.3, size = 3.5) +
theme(axis.text.x = element_text (angle = 45, hjust = 1)) +
ggtitle("Total de vistas para el Top de Peliculas")
image(ratingMatrix[1:20, 1:25], axes = F, main = "Mapa de color de las primeras
columnas y filas")
rating_peliculas
rating_peliculas <- ratingMatrix[rowCounts(ratingMatrix)>50,
colCounts(ratingMatrix)>50]
rating_peliculas
image(rating_peliculas[rowCounts(rating_peliculas)>minimo_peliculas,
colCounts(rating_peliculas)>minimo_usuarios],
main = "Mapa de color - TOP usuarios y películas")
minimo_peliculas <- quantile(rowCounts(rating_peliculas), 0.98)
minimo_usuarios <- quantile(colCounts(rating_peliculas), 0.98)
image(rating_peliculas[rowCounts(rating_peliculas)>minimo_peliculas,
colCounts(rating_peliculas)>minimo_usuarios],
main = "Mapa de color - TOP usuarios y películas")
promedio_rating <- rowMeans(rating_peliculas)
qplot(promedio_rating, fill = I("steelblue"), col = I("red"))+
ggtitle("Distribución del promedio de rating por usuario")
rating_normalizado <- normalize(rating_peliculas)
sum(rowMeans(rating_normalizado) > 0.00001)
image(rating_normalizado[rowCounts(rating_normalizado)> minimo_peliculas,
colCounts(rating_normalizado)> minimo_usuarios],
main = "Rating normalizado del promedio de los TOP usuarios")
binario_minimo_pelicula <- quantile(rowCounts(rating_peliculas), 0.95)
binario_minimo_pelicula <- quantile(rowCounts(rating_peliculas), 0.95)
library (recommenderlab)
binario_minimo_pelicula <- quantile(rowCounts(rating_peliculas), 0.95)
binario_minimo_usuario <- quantile(colCounts(rating_peliculas), 0.95)
buen_rating_pelicula <- binarize(rating_peliculas, minRating = 3)
image(buen_rating_pelicula[rowCounts(rating_peliculas) > binario_minimo_pelicula,
colCounts(rating_peliculas) > binario_minimo_usuario]
main = Mapa de color de los top user y peliculas binarizado)
image(buen_rating_pelicula[rowCounts(rating_peliculas) > binario_minimo_pelicula,
colCounts(rating_peliculas) > binario_minimo_usuario]
main = Mapa de color de los top user y peliculas binarizado)]
image(buen_rating_pelicula[rowCounts(rating_peliculas) > binario_minimo_pelicula,
colCounts(rating_peliculas) > binario_minimo_usuario]
main = "Mapa de color de los top user y peliculas binarizado")
image(buen_rating_pelicula[rowCounts(rating_peliculas) > binario_minimo_pelicula,
colCounts(rating_peliculas) > binario_minimo_usuario],
main = "Mapa de color de los top user y peliculas binarizado")
View(buen_rating_pelicula)
View(buen_rating_pelicula)
buen_rating_pelicula@data@data
dato_muestra <- sample(x = c(T,F),
size = nrow(rating_peliculas),
replace = T,
prob = c(0.8 , 0.2))
dato_muestra <- sample(x = c(T,F),
size = nrow(rating_peliculas),
replace = T,
prob = c(0.8 , 0.2))
dato_entrenamiento <- rating_peliculas[dato_muestra, ]
dato_prueba <- rating_peliculas[!dato_muestra, ]
View(dato_entrenamiento)
sistema_recomendacion <- recommenderRegistry$get_entries(dataType ="realRatingMatrix")
sistema_recomendacion$IBCF_realRatingMatrix$parameters
modelo_recomendacion <- Recommender(data = dato_entrenamiento,
method = "IBCF",
parameter = list(k = 30))
modelo_recomendacion
class(modelo_recomendacion)
modelo_info <- getModel(modelo_recomendacion)
class(modelo_info)
class(modelo_info$sim)
dim(modelo_info$sim)
top_items <- 20
image(modelo_info$sim[1:top_items, 1:top_items],)
sum_row <- rowSums(modelo_info$sim)
sum_row <- rowSums(modelo_info$sim > 0)
suma_filas <- rowSums(modelo_info$sim > 0)
table (suma_filas)
suma_columnas <- colSums(modelo_info$sim > 0)
qplot(suma_columnas, fill = I("steelblue"), col = I("red")) + ggtitle (
"Distribución de la suma de columnas")
qplot(suma_columnas, fill = I("steelblue"), col = I("red")) + ggtitle (
"Distribución de la suma de columnas")
library (ggplot2)
qplot(suma_columnas, fill = I("steelblue"), col = I("red")) + ggtitle (
"Distribución de la suma de columnas")
top_recomendaciones <- 10 # es la cant. de recomendaciones que recibirá cada usuario
recomendacion_prediccion <- predict(object = modelo_recomendacion,
newdata = dato_prueba,
n = top_recomendaciones)
library (recommenderlab)
library (ggplot2)
library (data.table)
library (reshape2)
recomendacion_prediccion <- predict(object = modelo_recomendacion,
newdata = dato_prueba,
n = top_recomendaciones)
recomendacion_prediccion
usuario1 <- [email_protected][[1]]
usuario1 <- recomendacion_prediccion@items[[1]] #recomendación para el 1er usuario
peliculas_usuario1 <- recomendacion_prediccion@itemLabels[usuario1]
peliculas_usuario2 <- peliculas_usuario1
for (index in 1:10) (
peliculas_usuario2[index] <- as.character(subset(movie_data,
movie_data$movieId == peliculas_usuario1[index])
$title)
)
peliculas_usuario1
peliculas_usuario2
recomendacion_matriz <- sapply(recomendacion_prediccion@items,
function(x){as.integer(colnames(rating_peliculas)
[x])})# matriz con las recomendaciones
#para cada usuario
recomendacion_matriz[,1:4]
library (recommenderlab)
library (ggplot2)
library (data.table)
library (reshape2)
getwd()
movie_data <- read.csv("movies.csv", stringsAsFactors = F)
rating_data <- read.csv("ratings.csv")
str(movie_data)
#Exploramos los datos, la cantidad de registros, el tipo de dato, los primeros y
#los últimos registros.
summary(movie_data)
head(movie_data)
tail(movie_data)
#Exploramos los datos del DF rating de la misma manera
summary (rating_data)
head(rating_data)
tail(rating_data)
movie_genre <- as.data.frame(movie_data$genres, stringsAsFactors = F)
movie_genre2 <- as.data.frame(tstrsplit(movie_genre[,1], "[|]",
type.convert = T),
stringAsFactors = F)
colnames(movie_genre2) <- c(1:10)
list_genre <- c("Action","Adventure","Animation","Children","Comedy","Crime",
"Documentary","Drama","Fantasy","Film-Noir","Horror","Musical",
"Mistery","Romance","Sci-Fi","Thriller","War","Western")
genre_mat1 <- matrix(0,10330,18)
genre_mat1[1,] <- list_genre
colnames(genre_mat1) <- list_genre
for (index in 1:nrow(movie_genre2)) {
for(col in 1:ncol(movie_genre2))  {
gen_col = which (genre_mat1[1,] == movie_genre2[index,col])
genre_mat1[index+1, gen_col] <- 1
}
}
genre_mat2 <- as.data.frame(genre_mat1[-1,], stringsAsFactors = F)
for (col in 1:ncol (genre_mat2)){
genre_mat2[,col] <- as.integer (genre_mat2[,col])
}
str(genre_mat2)
SearchMatrix <- cbind(movie_data[,1:2], genre_mat2[])
head(SearchMatrix)
ratingMatrix <- reshape2::dcast(rating_data, userId~movieId, value.var = "rating",na.rm=FALSE)
ratingMatrix <- as.matrix(ratingMatrix[,-1]) #remove userIds
#Convert rating matrix into a recommenderlab sparse matrix
ratingMatrix <- as(ratingMatrix, "realRatingMatrix")
ratingMatrix
modelo_recomendacion <- recommenderRegistry$get_entries(dataType = "realRatingMatrix")
names(modelo_recomendacion)
lapply(modelo_recomendacion, "[[", "description")
modelo_recomendacion$IBCF_realRatingMatrix$parameters
similitud <- similarity(ratingMatrix[1:4, ],
method = "cosine",
which = "users")
as.matrix(similitud)
image(as.matrix(similitud), main = "Similitud del usuario")
similitud_peliculas <- similarity(ratingMatrix[ ,1:4],
method = "cosine",
which = "items")
as.matrix(similitud_peliculas)
image(as.matrix(similitud_peliculas), main = "Similitud entre películas")
#Ahora sacamos los valores unicos de raitings
valor_rating <- as.vector(ratingMatrix@data)
unique(valor_rating)
tabla_de_ratings <- table(valor_rating)
tabla_de_ratings
vistas_peliculas <- colCounts(ratingMatrix) #cuenta las vistas para cada pelicula
tabla_vistas <- data.frame(pelicula = names(vistas_peliculas),
vistas = vistas_peliculas)#crea un df de vistas
tabla_vistas <- tabla_vistas[order(tabla_vistas$vistas,
decreasing = T),]#ordena decrecientemente
tabla_vistas$title <- NA
for (index in 1:10325){
tabla_vistas[index,3] <- as.character(subset(movie_data, movie_data$movieId
== tabla_vistas[index,1])$title)
}
tabla_vistas[1:6,]
#Ahora tenemos una tabla con el id de pelicula, la cantidad de vistas y el título
#lo visualizamos en ggplot
ggplot(tabla_vistas[1:6, ], aes(x = title, y = vistas)) +
geom_bar(stat="identity", fill = "steelblue")+
geom_text(aes(label = vistas), vjust = -0.3, size = 3.5) +
theme(axis.text.x = element_text (angle = 45, hjust = 1)) +
ggtitle("Total de vistas para el Top de Peliculas")
#Ahora tenemos una tabla con el id de pelicula, la cantidad de vistas y el título
#lo visualizamos en ggplot
ggplot(tabla_vistas[1:6, ], aes(x = title, y = vistas)) +
geom_bar(stat="identity", fill = "steelblue")+
geom_text(aes(label = vistas), vjust = -0.3, size = 3.5) +
theme(axis.text.x = element_text (angle = 45, hjust = 1)) +
ggtitle("Total de vistas para el Top de Peliculas")
library(usethis)
install.packages("usethis")
library (usethis)
usethis::edit_git_config()
usethis::use_git()
library(usethis)
usethis::use_git()
which git
git -- version
usethis::edit_git_config()
use_git()
